{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
		"workspaceName": {
            "type": "string",
            "metadata": {
                "Description": "Name of the Log Analytics workspace"
            }
		},
		"MinimumDifferentHostsThreashold": {
            "type": "string",
			"defaultValue": "200",
            "metadata": {
                "Description": "Minimum number of hosts scanned threashold"
            }
		},
		"BinTime": {
            "type": "string",
			"defaultValue": "30",
            "metadata": {
                "Description": "Scan bin time in seconds"
            }
		},
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
            "description": "Location must match the location of the workspace - Do not edit this parameter."
            }
        }
    },
    "variables": {
        "alertLocation":"[parameters('location')]",
        "alertName": "Port Sweep",
        "alertDescription": "Port Sweep is the act of scanning ports on one or more computers.\nThis alert search for source IP scans the same port on multiple hosts.\n Configurable Parameters:\n\tPort sweep time - the time range to look for multiple hosts scanned. Default set to 30 seconds.\n\tMinimum different hosts threashold - alert only if more than this number of hosts scanned. Default set to 200.",
        "alertStatus": "true",
        "alertSource":{
            "Query": "[concat('let RunTime = 1h; let StartRunTime = 1d; let EndRunTime = StartRunTime - RunTime; let MinimumDifferentHostsThreashold = ', parameters('MinimumDifferentHostsThreashold'), '; let ExcludedPorts = dynamic([80, 443]); let BinTime = ', parameters('BinTime'), 's; AzureDiagnostics | where TimeGenerated  between (ago(StartRunTime) .. ago(EndRunTime)) | where OperationName == \"AzureFirewallApplicationRuleLog\" or OperationName == \"AzureFirewallNetworkRuleLog\" | parse msg_s with * \"from \" srcip \":\" srcport \" to \" dsturl \":\" dstport  \".\" * | where dstport !in (ExcludedPorts) | where isnotempty(dsturl) and isnotempty(srcip) and isnotempty(dstport) | summarize AlertTimedCountHostsInBinTime = dcount(dsturl) by srcip, bin(TimeGenerated, BinTime), dstport | where AlertTimedCountHostsInBinTime > MinimumDifferentHostsThreashold')]",
			"SourceId": "[resourceId('Microsoft.OperationalInsights/workspaces',parameters('workspaceName'))]",
            "Type":"ResultCount"
        },
        "alertSchedule":{
            "Frequency": 5,
            "Time": 60
        },
        "alertActions":{
            "SeverityLevel": "4"
        },
        "alertTrigger":{
            "Operator":"GreaterThan",
            "Threshold":"1"
        }
    },
    "resources":[ {
        "name":"[variables('alertName')]",
        "type":"Microsoft.Insights/scheduledQueryRules",
        "apiVersion": "2018-04-16",
        "location": "[variables('alertLocation')]",
        "properties":{
            "description": "[variables('alertDescription')]",
            "enabled": "[variables('alertStatus')]",
            "source": {
                "query": "[variables('alertSource').Query]",
                "dataSourceId": "[variables('alertSource').SourceId]",
                "queryType":"[variables('alertSource').Type]"
            },
            "schedule":{
                "frequencyInMinutes": "[variables('alertSchedule').Frequency]",
                "timeWindowInMinutes": "[variables('alertSchedule').Time]"
            },
            "action":{
                "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                "severity":"[variables('alertActions').SeverityLevel]",
                "trigger":{
                    "thresholdOperator":"[variables('alertTrigger').Operator]",
                    "threshold":"[variables('alertTrigger').Threshold]"
                }
            }
        }
    } ]
}