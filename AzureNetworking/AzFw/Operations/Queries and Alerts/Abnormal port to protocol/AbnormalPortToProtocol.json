{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
		"workspaceName": {
            "type": "string",
            "metadata": {
                "Description": "Name of the Log Analytics workspace"
            }
		},
		"LearningPeriod": {
            "type": "string",
			"defaultValue": "7",
            "metadata": {
                "Description": "Learning period for protocol learning in days"
            }
		},
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
            "description": "Location must match the location of the workspace - Do not edit this parameter."
            }
        }
    },
    "variables": {
        "alertLocation": "[parameters('location')]",
        "alertName": "Abnormal port to protocol",
        "alertDescription": "This alert search for abnormal protocol on port based on learning period activity.\nConfigurable Parameters:\n\tLearning period time - learning period for protocol learning in days. Default set to 7.",
        "alertStatus": "true",
        "alertSource":{
            "Query": "[concat('let LearningPeriod = ', parameters('LearningPeriod'), 'd; let RunTime = 1d; let StartLearningPeriod = LearningPeriod + RunTime; let EndRunTime = RunTime - 1d; let LearningPortToProtocol = (AzureDiagnostics | where OperationName == \"AzureFirewallApplicationRuleLog\" | parse msg_s with protocol \" request from \" srcip \":\" srcport \" to \" dsturl \":\" dstport \".\" * | where isnotempty(dstport) | where TimeGenerated between (ago(StartLearningPeriod) .. ago(RunTime)) | summarize LearningTimeCount = count() by LearningTimeDstPort = dstport, LearningTimeProtocol = protocol); let AlertTimePortToProtocol = (AzureDiagnostics | where OperationName == \"AzureFirewallApplicationRuleLog\" | parse msg_s with protocol \" request from \" srcip \":\" srcport \" to \" dsturl \":\" dstport \".\" * | where isnotempty(dstport) | where TimeGenerated between (ago(RunTime) .. ago(EndRunTime)) | summarize AlertTimeCount = count() by AlertTimeDstPort = dstport, AlertTimeProtocol = protocol); AlertTimePortToProtocol  | join kind=leftouter (LearningPortToProtocol) on $left.AlertTimeDstPort == $right.LearningTimeDstPort | where LearningTimeProtocol != AlertTimeProtocol')]",
			"SourceId": "[resourceId('Microsoft.OperationalInsights/workspaces',parameters('workspaceName'))]",
            "Type":"ResultCount"
        },
        "alertSchedule":{
            "Frequency": 5,
            "Time": 60
        },
        "alertActions":{
            "SeverityLevel": "2"
        },
        "alertTrigger":{
            "Operator":"GreaterThan",
            "Threshold":"1"
        }
    },
    "resources":[ {
        "name":"[variables('alertName')]",
        "type":"Microsoft.Insights/scheduledQueryRules",
        "apiVersion": "2018-04-16",
        "location": "[variables('alertLocation')]",
        "properties":{
            "description": "[variables('alertDescription')]",
            "enabled": "[variables('alertStatus')]",
            "source": {
                "query": "[variables('alertSource').Query]",
                "dataSourceId": "[variables('alertSource').SourceId]",
                "queryType":"[variables('alertSource').Type]"
            },
            "schedule":{
                "frequencyInMinutes": "[variables('alertSchedule').Frequency]",
                "timeWindowInMinutes": "[variables('alertSchedule').Time]"
            },
            "action":{
                "odata.type": "Microsoft.WindowsAzure.Management.Monitoring.Alerts.Models.Microsoft.AppInsights.Nexus.DataContracts.Resources.ScheduledQueryRules.AlertingAction",
                "severity":"[variables('alertActions').SeverityLevel]",
                "trigger":{
                    "thresholdOperator":"[variables('alertTrigger').Operator]",
                    "threshold":"[variables('alertTrigger').Threshold]"
                }
            }
        }
    } ]
}