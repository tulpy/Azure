{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "PlaybookName": {
            "defaultValue": "ContainerImageScanning",
            "type": "String"
        },
        "LogAnalyticsWorkspaceName": {
            "type": "String",
            "defaultValue": "Enter the workspace name"
        },
        "LogAnalyticsWorkspaceResourceGroupName": {
            "type": "string",
            "defaultValue": "Enter the Log Analytics workspace Name"
        },
        "LogAnalyticsWorkspaceSubscriptionID": {
            "type": "string",
            "defaultValue": "Enter the Log Analytics SubscriptionID "
        },
        "NotificationEmailAddress":{
            "type": "string",
            "defaultValue": "Enter the recipient's email address"
        }
    },
    "variables": {
        "o365ConnectionName" : "office365",
        "azuremonitorlogsConnectionName": "azuremonitorlogs"
    },
    "resources": [
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('azuremonitorlogsConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('azuremonitorlogsConnectionName')]",
                "customParameterValues": {},
                "api": {
                     "id": "[concat('/subscriptions/', subscription().subscriptionId  ,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                }
            }
        },
        {
            "type": "Microsoft.Web/connections",
            "apiVersion": "2016-06-01",
            "name": "[variables('o365ConnectionName')]",
            "location": "[resourceGroup().location]",
            "kind": "V1",
            "properties": {
                "displayName": "[variables('o365ConnectionName')]",
                "customParameterValues": {},
                "api": {
                   "id": "[concat('/subscriptions/', subscription().subscriptionId  ,'/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                }
            }
        },
        {
            "type": "Microsoft.Logic/workflows",
            "apiVersion": "2017-07-01",
            "name": "[parameters('PlaybookName')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogsConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('o365ConnectionName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "state": "Enabled",
                "definition": {
                    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "$connections": {
                            "defaultValue": {},
                            "type": "Object"
                        },
                        "emailtosend": {
                        "defaultValue": "[parameters('NotificationEmailAddress')]",
                        "type": "String"
                        }
                    },
                    "triggers": {
                        "Recurrence": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24
                            },
                            "type": "Recurrence"
                        }
                    },
                    "actions": {
                        "Condition_3": {
                            "actions": {
                                "Send_an_email_(V2)": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                        "body": {
                                            "Body": "<p>@{variables('Emailbody')}</p>",
                                            "Importance": "High",
                                            "Subject": "New Container Image Scan by ASC ",
                                            "To": "@parameters('emailtosend')"
                                        },
                                        "host": {
                                            "connection": {
                                                "name": "@parameters('$connections')['office365']['connectionId']"
                                            }
                                        },
                                        "method": "post",
                                        "path": "/v2/Mail"
                                    }
                                }
                            },
                            "runAfter": {
                                "For_each_2": [
                                    "Succeeded"
                                ]
                            },
                            "expression": {
                                "and": [
                                    {
                                        "equals": [
                                            "@variables('SendEmailFlag')",
                                            "@true"
                                        ]
                                    }
                                ]
                            },
                            "type": "If"
                        },
                        "Emailbody": {
                            "runAfter": {
                                "Initialize_variable": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "Emailbody",
                                        "type": "string"
                                    }
                                ]
                            }
                        },
                        "For_each_2": {
                            "foreach": "@body('Run_query_and_list_results')?['value']",
                            "actions": {
                                "Condition": {
                                    "actions": {
                                        "Condition_2": {
                                            "actions": {
                                                "Append_to_string_variable": {
                                                    "runAfter": {
                                                        "Create_HTML_table": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "AppendToStringVariable",
                                                    "inputs": {
                                                        "name": "Emailbody",
                                                        "value": "<div><strong>\nNew Scan Recommendation: @{split(items('For_each_2')?['unique_id'], '/')[0]}\n</strong></div>\n<style>table, th, td {\r  border: 1px solid black;\r}</style> @{body('Create_HTML_table')} - "
                                                    }
                                                },
                                                "Create_HTML_table": {
                                                    "runAfter": {},
                                                    "type": "Table",
                                                    "inputs": {
                                                        "format": "HTML",
                                                        "from": "@body('Run_query_and_list_results_2')?['value']"
                                                    }
                                                },
                                                "Set_variable_2": {
                                                    "runAfter": {
                                                        "Append_to_string_variable": [
                                                            "Succeeded"
                                                        ]
                                                    },
                                                    "type": "SetVariable",
                                                    "inputs": {
                                                        "name": "SendEmailFlag",
                                                        "value": "@true"
                                                    }
                                                }
                                            },
                                            "runAfter": {
                                                "Run_query_and_list_results_2": [
                                                    "Succeeded"
                                                ]
                                            },
                                            "expression": {
                                                "and": [
                                                    {
                                                        "greater": [
                                                            "@length(body('Run_query_and_list_results_2')?['value'])",
                                                            0
                                                        ]
                                                    }
                                                ]
                                            },
                                            "type": "If"
                                        },
                                        "Run_query_and_list_results_2": {
                                            "runAfter": {},
                                            "type": "ApiConnection",
                                            "inputs": {
                                                "body": "let newscan = SecurityNestedRecommendation\n| where  TimeGenerated >  now()-24h\n| extend registryResourceId = tostring(split(Id, \"/providers/Microsoft.Security/\")[0])\n| extend repository = tostring(AdditionalData.RepositoryName)\n| extend unique_id = strcat(tostring(AdditionalData.ImageDigest), \"/\",repository, registryResourceId)\n| extend registryName = tostring(split(Id,\"/\")[8]);\nlet oldscan = SecurityNestedRecommendation\n| where  TimeGenerated <  now()-24h\n| extend registryResourceId = tostring(split(Id, \"/providers/Microsoft.Security/\")[0])\n| extend repository = tostring(AdditionalData.RepositoryName)\n| extend unique_id = strcat(tostring(AdditionalData.ImageDigest), \"/\",repository, registryResourceId)\n| extend registryName = tostring(split(Id,\"/\")[8]);\nnewscan\n| join kind=leftanti oldscan on $left.unique_id == $right.unique_id,RecommendationName\n| where unique_id == \"@{items('For_each_2')?['unique_id']}\"\n| distinct RecommendationName,TimeGenerated, repository,ResourceGroup, Description, RecommendationSeverity,RemediationDescription,registryName\n| project TimeGenerated, registryName,repository,ResourceGroup, RecommendationName, Description, RecommendationSeverity,RemediationDescription",
                                                "host": {
                                                    "connection": {
                                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                                    }
                                                },
                                                "method": "post",
                                                "path": "/queryData",
                                                "queries": {
                                                    "resourcegroups": "[parameters('LogAnalyticsWorkspaceResourceGroupName')]",
                                                    "resourcename": "[parameters('LogAnalyticsWorkspaceName')]",
                                                    "resourcetype": "Log Analytics Workspace",
                                                    "subscriptions": "[parameters('LogAnalyticsWorkspaceSubscriptionID')]",
                                                    "timerange": "Set in query"
                                                }
                                            }
                                        }
                                    },
                                    "runAfter": {
                                        "Set_variable": [
                                            "Succeeded",
                                            "Failed",
                                            "Skipped",
                                            "TimedOut"
                                        ]
                                    },
                                    "expression": {
                                        "and": [
                                            {
                                                "and": [
                                                    {
                                                        "not": {
                                                            "equals": [
                                                                "@items('For_each_2')?['unique_id']",
                                                                "@string('')"
                                                            ]
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    },
                                    "type": "If"
                                },
                                "Set_variable": {
                                    "runAfter": {},
                                    "type": "SetVariable",
                                    "inputs": {
                                        "name": "ASCResult",
                                        "value": "@items('For_each_2')?['unique_id']"
                                    }
                                }
                            },
                            "runAfter": {
                                "Run_query_and_list_results": [
                                    "Succeeded"
                                ]
                            },
                            "type": "Foreach",
                            "runtimeConfiguration": {
                                "concurrency": {
                                    "repetitions": 1
                                }
                            }
                        },
                        "Initialize_variable": {
                            "runAfter": {
                                "Listofimages": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "ASCResult",
                                        "type": "string",
                                        "value": "==========================="
                                    }
                                ]
                            }
                        },
                        "Listofimages": {
                            "runAfter": {
                                "SendEmailflag": [
                                    "Succeeded"
                                ]
                            },
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "listofimages",
                                        "type": "array"
                                    }
                                ]
                            }
                        },
                        "Run_query_and_list_results": {
                            "runAfter": {
                                "Emailbody": [
                                    "Succeeded"
                                ]
                            },
                            "type": "ApiConnection",
                            "inputs": {
                                "body": "SecurityNestedRecommendation\n| where  TimeGenerated >  now()-24h\n| extend registryResourceId = tostring(split(Id, \"/providers/Microsoft.Security/\")[0])\n| extend repository = tostring(AdditionalData.RepositoryName)\n| extend unique_id = strcat(tostring(AdditionalData.ImageDigest),\"/\", repository, registryResourceId)\n| distinct unique_id\n| project unique_id",
                                "host": {
                                    "connection": {
                                        "name": "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                    }
                                },
                                "method": "post",
                                "path": "/queryData",
                                "queries": {
                                    "resourcegroups": "[parameters('LogAnalyticsWorkspaceResourceGroupName')]",
                                    "resourcename": "[parameters('LogAnalyticsWorkspaceName')]",
                                    "resourcetype": "Log Analytics Workspace",
                                    "subscriptions": "[parameters('LogAnalyticsWorkspaceSubscriptionID')]",
                                    "timerange": "Set in query"
                                }
                            }
                        },
                        "SendEmailflag": {
                            "runAfter": {},
                            "type": "InitializeVariable",
                            "inputs": {
                                "variables": [
                                    {
                                        "name": "SendEmailFlag",
                                        "type": "boolean",
                                        "value": "@false"
                                    }
                                ]
                            }
                        }
                    },
                    "outputs": {}
                },
                "parameters": {
                    "$connections": {
                        "value": {
                            "azuremonitorlogs": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogsConnectionName'))]",
                                "connectionName": "azuremonitorlogs",
                                "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            },
                            "office365": {
                                "connectionId": "[resourceId('Microsoft.Web/connections', variables('o365ConnectionName'))]",
                                "connectionName": "office365",
                               "id": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office365')]"
                            }
                        }
                    }
                }
            }
        }
    ]
}
