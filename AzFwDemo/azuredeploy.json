{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "virtualNetworkName": {
            "type": "string",
            "defaultValue": "vnet"
        },
        "adminUsername": {
            "type": "string",
            "defaultValue": "azureadmin"
        },
        "adminPassword": {
            "type": "string",
            "defaultValue": "Steveisgay111"
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]"
        },
        "availabilityZones": {
            "type": "array",
            "defaultValue": [
                "1",
                "2",
                "3"
            ]
        },
        "vmSize": {
            "type": "string",
            "defaultValue": "Standard_B2s"
        },
                "ThreatIntelMode": {
            "metadata": {
                "description": "Threat Intellengence Mode traffic passing hits these rules first and have the following actions Off, Alert, Deny"
            },
            "defaultValue": "Alert",
            "allowedValues": [
                "Off",
                "Alert",
                "Deny"
            ],
            "type": "String"
        },
        "IDPSMode": {
            "metadata": {
                "description": "IDPS inspection and have the following actions Off, Alert, Deny"
            },
            "defaultValue": "Alert",
            "allowedValues": [
                "Off",
                "Alert",
                "Deny"
            ],
            "type": "String"
        },
        "GitHubRepoUrls": {
            "metadata": {
                "description": "Array of The specific GitHub Repos URLs for each Repo this must be looked up as it is unique per instance EX. github.com/swiftsolves-msft* and raw.githubusercontent.com/swiftsolves-msft* "
            },
            "defaultValue": ["github.com/tulpy*","raw.githubusercontent.com/tulpy*"],
            "type": "Array"
        },
        "numberOfFirewallPublicIPAddresses": {
            "type": "int",
            "defaultValue": 1,
            "minValue": 1,
            "maxValue": 100
        }
    },
    "variables": {
        "vnetAddressPrefix": "10.0.0.0/16",
        "serversSubnetPrefix": "10.0.2.0/24",
        "azureFirewallSubnetPrefix": "10.0.1.0/24",
        "bastionSubnetPrefix": "10.0.0.0/24",
        "nextHopIP": "10.0.1.4",

        "bastionSubnetName": "AzureBastionSubnet",
        "bastionName": "bastion",
        "bastionIpName": "bastionpip",
        "bastionPipId": "[resourceId('Microsoft.Network/publicIPAddresses/', variables('BastionIpName'))]",
        "bastionSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('bastionSubnetName'))]",
        "bastionNsg": "[concat(variables('bastionSubnetName'), '-nsg')]",

        "serversSubnetName": "ServersSubnet",
        "serverSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('virtualNetworkName'), variables('serversSubnetName'))]",
        "serverNsg": "[concat(variables('serversSubnetName'), '-nsg')]",
        "serverName": "azfwdemo",
        "serverNicName": "nic",

        "azfwSubnetName": "AzureFirewallSubnet",
        "azfwIpName": "azfwpip",
        "azfwSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets',parameters('virtualNetworkName'), variables('azfwSubnetName'))]",
        "azfwRouteTableName": "udr",
        "azfwName": "azfw",
        "azfwPolicyName": "GitHubRepoFirewallPolicy",
        "azfwSubnetJSON": "[json(format('{{\"id\": \"{0}\"}}', variables('azfwSubnetId')))]",
        "copy": [
            {
                "name": "azureFirewallIpConfigurations",
                "count": "[parameters('numberOfFirewallPublicIPAddresses')]",
                "input": {
                    "name": "[concat('IpConf', copyIndex('azureFirewallIpConfigurations'))]",
                    "properties": {
                        "subnet": "[if(equals(copyIndex('azureFirewallIpConfigurations'), 0), variables('azfwSubnetJSON'), json('null'))]",
                        "publicIPAddress": {
                            "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('azfwIpName'), add(copyIndex('azureFirewallIpConfigurations'), 1)))]"
                        }
                    }
                }
            }
        ]
    },
    "resources": [
        {
            "type": "Microsoft.Network/routeTables",
            "name": "[variables('azfwRouteTableName')]",
            "apiVersion": "2019-04-01",
            "location": "[parameters('location')]",
            "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                    {
                        "name": "AzfwDefaultRoute",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[variables('nextHopIP')]"
                        }
                    }
                ]
            }
        },
        {
            "comments": "Simple Network Security Group for subnet [variables('serversSubnetName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "[variables('serverNsg')]",
            "location": "[parameters('location')]",
            "properties": {}
        },
        {
            "comments": "Simple Network Security Group for subnet [variables('bastionSubnetName')]",
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2019-08-01",
            "name": "[variables('bastionNsg')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "allowHttpsInbound",
                        "properties": {
                            "description": "This is required for inbound HTTPS access from the internet.",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "Internet",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowGatewayManagerInbound",
                        "properties": {
                            "description": "This is required for inbound HTTPS access from the Gateway Manager.",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "GatewayManager",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowAzureLoadBalancer",
                        "properties": {
                            "description": "This is required for inbound HTTPS access from the Azure Load Balancer.",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "AzureLoadBalancer",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 140,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowBastionHostCommunication",
                        "properties": {
                            "description": "This is required for inbound HTTPS access from the Azure Load Balancer.",
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 150,
                            "direction": "Inbound"
                        }
                    },
                    {
                        "name": "allowBastionToVirtualNetwork",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRanges": [
                                "22",
                                "3389"
                            ],
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 100,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "allowBastionToAzureCloud",
                        "properties": {
                            "protocol": "Tcp",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "destinationAddressPrefix": "AzureCloud",
                            "access": "Allow",
                            "priority": 120,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "allowVirtualNetworkToVirtualNetwork",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRanges": [
                                "8080",
                                "5701"
                            ],
                            "sourceAddressPrefix": "VirtualNetwork",
                            "destinationAddressPrefix": "VirtualNetwork",
                            "access": "Allow",
                            "priority": 130,
                            "direction": "Outbound"
                        }
                    },
                    {
                        "name": "denyAllOutbound",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Deny",
                            "priority": 1000,
                            "direction": "Outbound"
                        }
                    }
                ]
            }
        },
        {
            "name": "[parameters('virtualNetworkName')]",
            "apiVersion": "2020-06-01",
            "type": "Microsoft.Network/virtualNetworks",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/routeTables', variables('azfwRouteTableName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('serverNsg'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNsg'))]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('azfwSubnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('azureFirewallSubnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-06-01",
            "name": "[concat(parameters('virtualNetworkName'), '/', 'AzureBastionSubnet')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNsg'))]"
            ],
            "properties": {
                "addressPrefix": "[variables('bastionSubnetPrefix')]",
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('bastionNsg'))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "2020-06-01",
            "name": "[concat(parameters('virtualNetworkName'), '/', variables('serversSubnetName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "[resourceId('Microsoft.Network/routeTables', variables('azfwRouteTableName'))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('serverNsg'))]"
            ],
            "properties": {
                "addressPrefix": "[variables('serversSubnetPrefix')]",
                "routeTable": {
                    "id": "[resourceId('Microsoft.Network/routeTables', variables('azfwRouteTableName'))]"
                },
                "networkSecurityGroup": {
                    "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('serverNsg'))]"
                }
            }
        },
        {
            "name": "[concat(variables('azfwIpName'), add(copyIndex(), 1))]",
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2020-06-01",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard"
            },
            "copy": {
                "name": "publicIpCopy",
                "count": "[parameters('numberOfFirewallPublicIPAddresses')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
            }
        },
        {
            "apiVersion": "2020-11-01",
            "type": "Microsoft.Network/azureFirewalls",
            "name": "[variables('azfwName')]",
            "location": "[parameters('location')]",
            "zones": "[if(equals(length(parameters('availabilityZones')), 0), json('null'), parameters('availabilityZones'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]",
                "publicIpCopy"
            ],
            "properties": {
                "sku": {
                    "name": "AZFW_VNet",
                    "tier": "Premium"
                },
                "threatIntelMode": "Alert",
                "ipConfigurations": "[variables('azureFirewallIpConfigurations')]",
                "applicationRuleCollections": [
                ],
                "networkRuleCollections": [
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "2020-06-01",
            "name": "[variables('bastionIpName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'), '/subnets/AzureBastionSubnet')]"
            ],
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "publicIPAddressVersion": "IPv4"
            }
        },
        {
            "apiVersion": "2020-05-01",
            "type": "Microsoft.Network/bastionHosts",
            "name": "[variables('bastionName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIpAddresses/', variables('bastionIpName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'), '/subnets/AzureBastionSubnet')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[variables('bastionIpName')]",
                        "properties": {
                            "subnet": {
                                "id": "[variables('bastionSubnetId')]"
                            },
                            "publicIPAddress": {
                                "id": "[variables('bastionPipId')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2019-04-01",
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[variables('serverNicName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', parameters('virtualNetworkName'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('serverSubnetId')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "name": "[variables('serverName')]",
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "2019-03-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('serverNicName'))]"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "MicrosoftWindowsServer",
                        "offer": "WindowsServer",
                        "sku": "2019-Datacenter",
                        "version": "latest"
                    },
                    "osDisk": {
                        "osType": "Windows",
                        "createOption": "FromImage"
                    }
                },
                "osProfile": {
                    "computerName": "[variables('serverName')]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('serverNicName'))]"
                        }
                    ]
                },
                "licenseType": "Windows_Server"
            }
        },
         {
            "type": "Microsoft.Network/firewallPolicies",
            "apiVersion": "2020-05-01",
            "name": "[variables('azfwPolicyName')]",
            "location": "[resourceGroup().location]",
            "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                    "[parameters('userAssignedIdentityId')]": {}
                }
            },
            "properties": {
                "sku": {"tier": "Premium"},
                "threatIntelMode": "[parameters('ThreatIntelMode')]",
                "threatIntelWhitelist": {
                    "ipAddresses": []
                },
                "transportSecurity": {
                    "certificateAuthority": {
                        "name": "[parameters('keyVaultCASecretName')]",
                        "keyVaultSecretId": "[concat(reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2019-09-01').vaultUri, 'secrets/', parameters('keyVaultCASecretName'))]"
                    }
                },
            	"intrusionDetection": {
					"mode": "[parameters('IDPSMode')]",
					"configuration": {
						"signatureOverrides": [],
						"bypassTrafficSettings": []
					}
				},
                "dnsSettings": {
                    "servers": [],
                    "enableProxy": true
                }
            }
        },
        {
            "type": "Microsoft.Network/firewallPolicies/ruleCollectionGroups",
            "apiVersion": "2020-05-01",
            "name": "[concat(variables('azfwPolicyName'), '/DefaultApplicationRuleCollectionGroup')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/firewallPolicies', variables('azfwPolicyName'))]"
            ],
            "properties": {
                "priority": 300,
                "ruleCollections": [
                    {
                        "ruleCollectionType": "FirewallPolicyFilterRuleCollection",
                        "action": {
                            "type": "Allow"
                        },
                        "rules": [
                            {
                                "ruleType": "ApplicationRule",
                                "name": "AllowGitHubBase",
                                "protocols": [
                                    {
                                        "protocolType": "Https",
                                        "port": 443
                                    }
                                ],
                                "fqdnTags": [],
                                "targetFqdns": [],
									"targetUrls":[ 
										"github.githubassets.com/*",
										"github.com/session",
										"github.com/sessions/two-factor",
										"github.com/login*",
										"github.com/Azure*",
										"raw.githubusercontent.com/Azure*"
									],
                                "terminateTLS": true,
                                "sourceAddresses": [],
                                "destinationAddresses": [],
                                "sourceIpGroups": [
                                    "[variables('serversSubnetPrefix')]"
                                ]
                            },
                            {
                                "ruleType": "ApplicationRule",
                                "name": "AllowGitHubRepo",
                                "protocols": [
                                    {
                                        "protocolType": "Https",
                                        "port": 443
                                    }
                                ],
                                "fqdnTags": [],
                                "targetFqdns": [],
									"targetUrls": "[parameters('GitHubRepoUrls')]",
                                "terminateTLS": true,
                                "sourceAddresses": [],
                                "destinationAddresses": [],
                                "sourceIpGroups": [
                                    "[variables('serversSubnetPrefix')]"
                                ]
                            }
                        ],
                        "name": "AllowGithub",
                        "priority": 200
                    }
                ]
            }
        }
    ]
}